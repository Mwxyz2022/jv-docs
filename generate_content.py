# -*- coding: utf-8 -*-
import os
import yaml
import re
from config import GEMINI_API_KEY, load_prompt
from gemini_service import configure_gemini, generate_conspectus

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
PROCESSING_LIST_FILE = "files_to_process.txt"
FAIL_LOG_FILE = "fail_process.txt"

def get_file_data(file_path: str) -> tuple[dict | None, str | None]:
    """
    –ß–∏—Ç–∞—î YAML Front Matter —Ç–∞ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑ Markdown —Ñ–∞–π–ª—É.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            match = re.search(r'^---\s*\n(.*?)\n---\s*\n(.*)', content, re.DOTALL)
            if match:
                front_matter = yaml.safe_load(match.group(1))
                main_content = match.group(2).strip()
                return front_matter, main_content
    except Exception as e:
        print(f"   - –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É {file_path}: {e}")
    return None, None

def update_file_content(file_path: str, front_matter: dict, new_content: str):
    """
    –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î —Ñ–∞–π–ª, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ Front Matter —Ç–∞ –¥–æ–¥–∞—é—á–∏ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.
    """
    fm_string = yaml.dump(front_matter, allow_unicode=True, sort_keys=False)
    full_content_to_write = f"---\n{fm_string}---\n{new_content}"
    
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(full_content_to_write)
    print(f"   - ‚úÖ –§–∞–π–ª '{file_path}' —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")

def get_files_to_process() -> list[str]:
    """–ß–∏—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑ –∫–µ—Ä—É—é—á–æ–≥–æ —Ñ–∞–π–ª—É."""
    if not os.path.exists(PROCESSING_LIST_FILE):
        return []
    with open(PROCESSING_LIST_FILE, 'r', encoding='utf-8') as f:
        lines = f.readlines()
        return [line.strip() for line in lines if line.strip() and not line.strip().startswith('#')]

def update_processing_list(remaining_files: list[str]):
    """–ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î –∫–µ—Ä—É—é—á–∏–π —Ñ–∞–π–ª —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª—ñ–≤, —â–æ –∑–∞–ª–∏—à–∏–ª–∏—Å—è."""
    with open(PROCESSING_LIST_FILE, 'w', encoding='utf-8') as f:
        f.write("\n".join(remaining_files) + "\n" if remaining_files else "")

def log_failed_file(file_path: str):
    """–î–æ–¥–∞—î —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É, —è–∫–∏–π –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏, —É –ª–æ–≥-—Ñ–∞–π–ª."""
    with open(FAIL_LOG_FILE, 'a', encoding='utf-8') as f:
        f.write(f"{file_path}\n")

def check_configuration() -> tuple[dict, bool]:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é."""
    print("--- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ---")
    
    if not GEMINI_API_KEY:
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env")
        return {}, False
    print("‚úÖ API –∫–ª—é—á –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")

    prompt_files = {
        "section": "prompt/section_master_prompt.md",
        "overview": "prompt/overview_master_prompt.md",
        "topic": "prompt/topic_master_prompt.md",
        "faq": "prompt/faq_master_prompt.md"
    }
    
    loaded_prompts = {}
    config_ok = True
    for name, path in prompt_files.items():
        prompt_content = load_prompt(path)
        if prompt_content is None:
            print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: –§–∞–π–ª —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: '{path}'")
            config_ok = False
        else:
            loaded_prompts[name] = prompt_content
            print(f"‚úÖ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è '{name}' –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞.")
            
    if not config_ok: return {}, False
        
    print("--- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤ –ø–æ—Ä—è–¥–∫—É ---")
    return loaded_prompts, True

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É."""
    prompts, config_ok = check_configuration()
    if not config_ok: return
        
    try:
        configure_gemini(GEMINI_API_KEY)
    except ValueError as e:
        print(e)
        return

    files_queue = get_files_to_process()
    if not files_queue:
        print("\n–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ ('files_to_process.txt') –ø–æ—Ä–æ–∂–Ω—ñ–π. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.")
        return

    print(f"\nüöÄ –ü–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É. –í —á–µ—Ä–∑—ñ {len(files_queue)} —Ñ–∞–π–ª—ñ–≤...")

    while files_queue:
        file_path_from_list = files_queue.pop(0)
        clean_file_path = file_path_from_list.lstrip('/')
        
        is_successful = False
        try:
            if not os.path.exists(clean_file_path):
                raise FileNotFoundError(f"–§–∞–π–ª '{clean_file_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            
            print(f"\n–û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É: '{clean_file_path}'")
            front_matter, _ = get_file_data(clean_file_path)
            if not front_matter:
                raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ Front Matter.")

            master_prompt_key = None
            user_prompt = None
            
            if clean_file_path.endswith('qa.md'):
                master_prompt_key = "faq"
                full_title = front_matter.get('title', '')
                topic_title = re.sub(r'[\d\.]+\s*Q&A\s*:?\s*', '', full_title, flags=re.IGNORECASE).strip()
                related_summary = "–≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
                related_index_path = os.path.join(os.path.dirname(clean_file_path), 'index.md')
                if os.path.exists(related_index_path):
                    _, summary_content = get_file_data(related_index_path)
                    if summary_content: related_summary = summary_content
                user_prompt = f'[TOPIC_TITLE]: "{topic_title}"\n[RELATED_SUMMARY]: "{related_summary[:4000]}"'

            elif clean_file_path.endswith('index.md'):
                full_title = front_matter.get('title', '')
                match = re.match(r'([\d\.]+)', full_title)
                if not match: raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –Ω–æ–º–µ—Ä –∑ 'title' —É Front Matter.")
                
                topic_number = match.group(1)
                level = len(topic_number.split('.'))
                
                if front_matter.get('has_children', False):
                    sub_topics_list = []
                    sub_dirs = sorted([d for d in os.listdir(os.path.dirname(clean_file_path)) if os.path.isdir(os.path.join(os.path.dirname(clean_file_path), d))])
                    for sub_dir in sub_dirs:
                        sub_index_path = os.path.join(os.path.dirname(clean_file_path), sub_dir, 'index.md')
                        if os.path.exists(sub_index_path):
                            sub_fm, _ = get_file_data(sub_index_path)
                            if sub_fm: sub_topics_list.append(sub_fm.get('title', ''))
                    sub_topics_str = ", ".join(filter(None, sub_topics_list)) if sub_topics_list else "–≤—ñ–¥—Å—É—Ç–Ω—ñ"

                    if level <= 2:
                        master_prompt_key = "section"
                        user_prompt = f"–ù–∞–ø–∏—à–∏ –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–≥–ª—è–¥–æ–≤–∏–π —Ç–µ–∫—Å—Ç (1 –∞–±–∑–∞—Ü) –¥–ª—è –≤–µ–ª–∏–∫–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É '{full_title}'. –ô–æ–≥–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª–∏: {sub_topics_str}."
                    else:
                        master_prompt_key = "overview"
                        user_prompt = f"–ù–∞–ø–∏—à–∏ –∑–º—ñ—Å—Ç–æ–≤–Ω–∏–π –≤—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç (2-4 –∞–±–∑–∞—Ü–∏) –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É '{full_title}'. –ü–æ—è—Å–Ω–∏, —á–æ–º—É —Ü—è —Ç–µ–º–∞ –≤–∞–∂–ª–∏–≤–∞, —ñ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–µ–¥—Å—Ç–∞–≤ —ó—ó –ø—ñ–¥—Ç–µ–º–∏: {sub_topics_str}."

                else: # –Ω–µ –º–∞—î –¥–æ—á—ñ—Ä–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                    master_prompt_key = "topic"
                    topic_title = re.sub(r'[\d\.]+\s*', '', full_title).strip()
                    parent_title = front_matter.get('parent', 'N/A')
                    user_prompt = f'[TOPIC_NUMBER]: "{topic_number}"\n[TOPIC_TITLE]: "{topic_title}"\n[PARENT_TOPIC_TITLE]: "{parent_title}"'
            
            if not master_prompt_key: raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É.")
            
            master_prompt = prompts[master_prompt_key]
            generated_content = generate_conspectus(master_prompt, user_prompt)
            if not generated_content: raise Exception("API –ø–æ–≤–µ—Ä–Ω—É–ª–æ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")

            # --- –û–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å ---
            final_content = generated_content
            if clean_file_path.endswith('qa.md'):
                final_content += "\n\n* * *\n\n[–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ —Ç–µ–æ—Ä—ñ—ó](./index.md)\n"
            elif clean_file_path.endswith('index.md'):
                qa_file_path = os.path.join(os.path.dirname(clean_file_path), 'qa.md')
                if os.path.exists(qa_file_path):
                    final_content += "\n\n* * *\n\n[–ü–µ—Ä–µ–π—Ç–∏ –¥–æ Q&A](./qa.md)\n"

            update_file_content(clean_file_path, front_matter, final_content)
            is_successful = True

        except Exception as e:
            print(f"   - ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ {clean_file_path}: {e}")
            is_successful = False

        if not is_successful:
            log_failed_file(file_path_from_list)
        
        update_processing_list(files_queue)
        print(f"   - –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤ —á–µ—Ä–∑—ñ: {len(files_queue)} —Ñ–∞–π–ª—ñ–≤.")

    print("\n‚úÖ –ß–µ—Ä–≥–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ—Ä–æ–∂–Ω—è. –†–æ–±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

if __name__ == "__main__":
    main()
